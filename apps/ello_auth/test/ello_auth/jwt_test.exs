defmodule Ello.Auth.JWTTest do
  use Ello.Auth.Case
  alias Ello.Auth.JWT

  test "it can generate a public token" do
    token = JWT.generate
    parsed = Joken.token(token)
    assert %{"iss" => "Ello, PBC"} = Joken.peek(parsed)
  end

  test "it can generate a user token" do
    token = JWT.generate(%{id: 1234})
    parsed = Joken.token(token)
    assert %{"iss" => "Ello, PBC", "data" => %{"id" => 1234}} = Joken.peek(parsed)
  end

  test "it can verify public jwt tokens are valid" do
    token = JWT.generate
    assert {:ok, claims} = JWT.verify(token)
    assert claims["iss"] == "Ello, PBC"
    assert claims["exp"]
  end

  test "it can verify user jwt tokens are valid" do
    token = JWT.generate(%{id: 1234})
    assert {:ok, claims} = JWT.verify(token)
    assert claims["iss"] == "Ello, PBC"
    assert claims["data"] == %{"id" => 1234}
    assert claims["exp"]
  end

  test "it returns error if signature invalid" do
    # Generic token generated by JWT.io
    token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
    assert {:error, "Invalid signature"} = JWT.verify(token)
  end

  test "it returns error if token is expired" do
    Application.put_env(:ello_auth, :jwt_exp_duration, -2700)
    token = JWT.generate(%{id: 1234})
    assert {:error, "Invalid payload"} = JWT.verify(token)
    Application.put_env(:ello_auth, :jwt_exp_duration, 30)
  end
end
